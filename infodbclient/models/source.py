# coding: utf-8

"""
    Snippets API

    Test description  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from infodbclient.configuration import Configuration


class Source(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'name': 'str',
        'clear_name': 'str',
        'informal_name': 'str',
        'comment': 'str',
        'author_list': 'str',
        'link': 'str',
        'review': 'list[str]',
        'tag': 'list[str]'
    }

    attribute_map = {
        'url': 'url',
        'name': 'name',
        'clear_name': 'clear_name',
        'informal_name': 'informal_name',
        'comment': 'comment',
        'author_list': 'author_list',
        'link': 'link',
        'review': 'review',
        'tag': 'tag'
    }

    def __init__(self, url=None, name=None, clear_name=None, informal_name=None, comment=None, author_list=None, link=None, review=None, tag=None, _configuration=None):  # noqa: E501
        """Source - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._url = None
        self._name = None
        self._clear_name = None
        self._informal_name = None
        self._comment = None
        self._author_list = None
        self._link = None
        self._review = None
        self._tag = None
        self.discriminator = None

        if url is not None:
            self.url = url
        self.name = name
        self.clear_name = clear_name
        self.informal_name = informal_name
        self.comment = comment
        self.author_list = author_list
        if link is not None:
            self.link = link
        if review is not None:
            self.review = review
        if tag is not None:
            self.tag = tag

    @property
    def url(self):
        """Gets the url of this Source.  # noqa: E501


        :return: The url of this Source.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Source.


        :param url: The url of this Source.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def name(self):
        """Gets the name of this Source.  # noqa: E501


        :return: The name of this Source.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Source.


        :param name: The name of this Source.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def clear_name(self):
        """Gets the clear_name of this Source.  # noqa: E501


        :return: The clear_name of this Source.  # noqa: E501
        :rtype: str
        """
        return self._clear_name

    @clear_name.setter
    def clear_name(self, clear_name):
        """Sets the clear_name of this Source.


        :param clear_name: The clear_name of this Source.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and clear_name is None:
            raise ValueError("Invalid value for `clear_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                clear_name is not None and len(clear_name) < 1):
            raise ValueError("Invalid value for `clear_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._clear_name = clear_name

    @property
    def informal_name(self):
        """Gets the informal_name of this Source.  # noqa: E501


        :return: The informal_name of this Source.  # noqa: E501
        :rtype: str
        """
        return self._informal_name

    @informal_name.setter
    def informal_name(self, informal_name):
        """Sets the informal_name of this Source.


        :param informal_name: The informal_name of this Source.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and informal_name is None:
            raise ValueError("Invalid value for `informal_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                informal_name is not None and len(informal_name) < 1):
            raise ValueError("Invalid value for `informal_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._informal_name = informal_name

    @property
    def comment(self):
        """Gets the comment of this Source.  # noqa: E501


        :return: The comment of this Source.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Source.


        :param comment: The comment of this Source.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                comment is not None and len(comment) < 1):
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `1`")  # noqa: E501

        self._comment = comment

    @property
    def author_list(self):
        """Gets the author_list of this Source.  # noqa: E501


        :return: The author_list of this Source.  # noqa: E501
        :rtype: str
        """
        return self._author_list

    @author_list.setter
    def author_list(self, author_list):
        """Sets the author_list of this Source.


        :param author_list: The author_list of this Source.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and author_list is None:
            raise ValueError("Invalid value for `author_list`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                author_list is not None and len(author_list) < 1):
            raise ValueError("Invalid value for `author_list`, length must be greater than or equal to `1`")  # noqa: E501

        self._author_list = author_list

    @property
    def link(self):
        """Gets the link of this Source.  # noqa: E501


        :return: The link of this Source.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Source.


        :param link: The link of this Source.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def review(self):
        """Gets the review of this Source.  # noqa: E501


        :return: The review of this Source.  # noqa: E501
        :rtype: list[str]
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this Source.


        :param review: The review of this Source.  # noqa: E501
        :type: list[str]
        """

        self._review = review

    @property
    def tag(self):
        """Gets the tag of this Source.  # noqa: E501


        :return: The tag of this Source.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Source.


        :param tag: The tag of this Source.  # noqa: E501
        :type: list[str]
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Source, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Source):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Source):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Snippets API

    Test description  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from infodbclient.configuration import Configuration


class Link(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'text': 'str',
        'comment': 'str',
        'scheme': 'str',
        'base': 'str',
        'path': 'str',
        'edition': 'str',
        'publisher': 'str',
        'publishing_time': 'str',
        'tag': 'list[str]'
    }

    attribute_map = {
        'url': 'url',
        'text': 'text',
        'comment': 'comment',
        'scheme': 'scheme',
        'base': 'base',
        'path': 'path',
        'edition': 'edition',
        'publisher': 'publisher',
        'publishing_time': 'publishing_time',
        'tag': 'tag'
    }

    def __init__(self, url=None, text=None, comment=None, scheme=None, base=None, path=None, edition=None, publisher=None, publishing_time=None, tag=None, _configuration=None):  # noqa: E501
        """Link - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._url = None
        self._text = None
        self._comment = None
        self._scheme = None
        self._base = None
        self._path = None
        self._edition = None
        self._publisher = None
        self._publishing_time = None
        self._tag = None
        self.discriminator = None

        if url is not None:
            self.url = url
        self.text = text
        self.comment = comment
        self.scheme = scheme
        self.base = base
        self.path = path
        self.edition = edition
        self.publisher = publisher
        self.publishing_time = publishing_time
        if tag is not None:
            self.tag = tag

    @property
    def url(self):
        """Gets the url of this Link.  # noqa: E501


        :return: The url of this Link.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Link.


        :param url: The url of this Link.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def text(self):
        """Gets the text of this Link.  # noqa: E501


        :return: The text of this Link.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Link.


        :param text: The text of this Link.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                text is not None and len(text) < 1):
            raise ValueError("Invalid value for `text`, length must be greater than or equal to `1`")  # noqa: E501

        self._text = text

    @property
    def comment(self):
        """Gets the comment of this Link.  # noqa: E501


        :return: The comment of this Link.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Link.


        :param comment: The comment of this Link.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                comment is not None and len(comment) < 1):
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `1`")  # noqa: E501

        self._comment = comment

    @property
    def scheme(self):
        """Gets the scheme of this Link.  # noqa: E501


        :return: The scheme of this Link.  # noqa: E501
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this Link.


        :param scheme: The scheme of this Link.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and scheme is None:
            raise ValueError("Invalid value for `scheme`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                scheme is not None and len(scheme) < 1):
            raise ValueError("Invalid value for `scheme`, length must be greater than or equal to `1`")  # noqa: E501

        self._scheme = scheme

    @property
    def base(self):
        """Gets the base of this Link.  # noqa: E501


        :return: The base of this Link.  # noqa: E501
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this Link.


        :param base: The base of this Link.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and base is None:
            raise ValueError("Invalid value for `base`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                base is not None and len(base) < 1):
            raise ValueError("Invalid value for `base`, length must be greater than or equal to `1`")  # noqa: E501

        self._base = base

    @property
    def path(self):
        """Gets the path of this Link.  # noqa: E501


        :return: The path of this Link.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Link.


        :param path: The path of this Link.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                path is not None and len(path) < 1):
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `1`")  # noqa: E501

        self._path = path

    @property
    def edition(self):
        """Gets the edition of this Link.  # noqa: E501


        :return: The edition of this Link.  # noqa: E501
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this Link.


        :param edition: The edition of this Link.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and edition is None:
            raise ValueError("Invalid value for `edition`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                edition is not None and len(edition) < 1):
            raise ValueError("Invalid value for `edition`, length must be greater than or equal to `1`")  # noqa: E501

        self._edition = edition

    @property
    def publisher(self):
        """Gets the publisher of this Link.  # noqa: E501


        :return: The publisher of this Link.  # noqa: E501
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this Link.


        :param publisher: The publisher of this Link.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and publisher is None:
            raise ValueError("Invalid value for `publisher`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                publisher is not None and len(publisher) < 1):
            raise ValueError("Invalid value for `publisher`, length must be greater than or equal to `1`")  # noqa: E501

        self._publisher = publisher

    @property
    def publishing_time(self):
        """Gets the publishing_time of this Link.  # noqa: E501


        :return: The publishing_time of this Link.  # noqa: E501
        :rtype: str
        """
        return self._publishing_time

    @publishing_time.setter
    def publishing_time(self, publishing_time):
        """Sets the publishing_time of this Link.


        :param publishing_time: The publishing_time of this Link.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and publishing_time is None:
            raise ValueError("Invalid value for `publishing_time`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                publishing_time is not None and len(publishing_time) < 1):
            raise ValueError("Invalid value for `publishing_time`, length must be greater than or equal to `1`")  # noqa: E501

        self._publishing_time = publishing_time

    @property
    def tag(self):
        """Gets the tag of this Link.  # noqa: E501


        :return: The tag of this Link.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Link.


        :param tag: The tag of this Link.  # noqa: E501
        :type: list[str]
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Link, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Link):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Link):
            return True

        return self.to_dict() != other.to_dict()
